<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140101: Last Updated: Fri Aug 13 11:10:06 2021
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DebugMon_Handler &rArr; DebugMon_Handler_Main &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[14]">DUALTIMER_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DUALTIMER_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from test.o(.text.BusFault_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[14]">DUALTIMER_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from test.o(.text.DebugMon_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[17]">ETHERNET_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[10]">GPIO0ALL_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[22]">GPIO0_0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[23]">GPIO0_1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[24]">GPIO0_2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[25]">GPIO0_3_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[26]">GPIO0_4_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[27]">GPIO0_5_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[28]">GPIO0_6_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[29]">GPIO0_7_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[11]">GPIO1ALL_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1a]">GPIO2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1b]">GPIO3_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from test.o(.text.HardFault_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[18]">I2S_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from test.o(.text.MemManage_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from test.o(.text.PendSV_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[15]">SPI_0_1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[20]">SPI_2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[21]">SPI_3_4_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from test.o(.text.SVC_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_cmsdk_cm3.o(.text.SystemInit) referenced from startup_cmsdk_cm3.o(.text)
 <LI><a href="#[12]">TIMER0_Handler</a> from blinky.o(.text.TIMER0_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[13]">TIMER1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[19]">TOUCHSCREEN_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[a]">UART0RX_Handler</a> from usart_v2m-mps2.o(.text.UART0RX_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[b]">UART0TX_Handler</a> from usart_v2m-mps2.o(.text.UART0TX_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[c]">UART1RX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[d]">UART1TX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[e]">UART2RX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[f]">UART2TX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1c]">UART3RX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1d]">UART3TX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1e]">UART4RX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1f]">UART4TX_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[16]">UART_0_1_2_OVF_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[39]">USART0_Control</a> from usart_v2m-mps2.o(.text.USART0_Control) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[30]">USART0_GetCapabilities</a> from usart_v2m-mps2.o(.text.USART0_GetCapabilities) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[3c]">USART0_GetModemStatus</a> from usart_v2m-mps2.o(.text.USART0_GetModemStatus) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[38]">USART0_GetRxCount</a> from usart_v2m-mps2.o(.text.USART0_GetRxCount) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[3a]">USART0_GetStatus</a> from usart_v2m-mps2.o(.text.USART0_GetStatus) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[37]">USART0_GetTxCount</a> from usart_v2m-mps2.o(.text.USART0_GetTxCount) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[31]">USART0_Initialize</a> from usart_v2m-mps2.o(.text.USART0_Initialize) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[33]">USART0_PowerControl</a> from usart_v2m-mps2.o(.text.USART0_PowerControl) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[35]">USART0_Receive</a> from usart_v2m-mps2.o(.text.USART0_Receive) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[34]">USART0_Send</a> from usart_v2m-mps2.o(.text.USART0_Send) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[3b]">USART0_SetModemControl</a> from usart_v2m-mps2.o(.text.USART0_SetModemControl) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[36]">USART0_Transfer</a> from usart_v2m-mps2.o(.text.USART0_Transfer) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[32]">USART0_Uninitialize</a> from usart_v2m-mps2.o(.text.USART0_Uninitialize) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[2f]">USARTx_GetVersion</a> from usart_v2m-mps2.o(.text.USARTx_GetVersion) referenced from usart_v2m-mps2.o(.rodata.Driver_USART0)
 <LI><a href="#[5]">UsageFault_Handler</a> from test.o(.text.UsageFault_Handler) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cmsdk_cm3.o(.text)
 <LI><a href="#[2e]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[2d]">fputc</a> from retarget_io.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2a]">main</a> from blinky.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DUALTIMER_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ETHERNET_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIO0ALL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPIO0_0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPIO0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIO0_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPIO0_3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPIO0_4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPIO0_5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPIO0_6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIO0_7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIO1ALL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2S_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI_3_4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TOUCHSCREEN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART1RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART2RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART2TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART3RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART4RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART4TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART_0_1_2_OVF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BusFault_Handler &rArr; Bus_Fault_Handler &rArr; stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>Bus_Fault_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, test.o(.text.Bus_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Bus_Fault_Handler &rArr; stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reset
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[83]"></a>Buttons_GetCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons_v2m-mps2.o(.text.Buttons_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>Buttons_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buttons_v2m-mps2.o(.text.Buttons_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Buttons_Initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons_v2m-mps2.o(.text.Buttons_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DebugMon_Handler &rArr; DebugMon_Handler_Main &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DebugMon_Handler_Main</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, test.o(.text.DebugMon_Handler_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DebugMon_Handler_Main &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[44]"></a>GLCD_ClearScreen</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.GLCD_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GLCD_ClearScreen &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pend_SV_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>GLCD_DrawChar</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, glcd_v2m-mps2.o(.text.GLCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[46]"></a>GLCD_DrawString</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, glcd_v2m-mps2.o(.text.GLCD_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pend_SV_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler_Main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>GLCD_Initialize</STRONG> (Thumb, 618 bytes, Stack size 8 bytes, glcd_v2m-mps2.o(.text.GLCD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GLCD_Initialize &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>GLCD_SetBackgroundColor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.GLCD_SetBackgroundColor))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>GLCD_SetFont</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.GLCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>GLCD_SetForegroundColor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.GLCD_SetForegroundColor))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HardFault_Handler &rArr; Hard_Fault_Handler &rArr; printUsageErrorMsg &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Hard_Fault_Handler</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, test.o(.text.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hard_Fault_Handler &rArr; printUsageErrorMsg &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_disable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[5b]"></a>I2C_rx</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, touch_v2m-mps2.o(.text.I2C_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_rx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txStop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txStart
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txAck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxAck
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>

<P><STRONG><a name="[61]"></a>I2C_rxAck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, touch_v2m-mps2.o(.text.I2C_rxAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_rxAck &rArr; I2C_rxBit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>

<P><STRONG><a name="[65]"></a>I2C_rxBit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_rxBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_rxBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxAck
</UL>

<P><STRONG><a name="[62]"></a>I2C_rxByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_rxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_rxByte &rArr; I2C_rxBit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>

<P><STRONG><a name="[5d]"></a>I2C_tx</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, touch_v2m-mps2.o(.text.I2C_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txStop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txStart
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxAck
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[63]"></a>I2C_txAck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, touch_v2m-mps2.o(.text.I2C_txAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_txAck &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>

<P><STRONG><a name="[66]"></a>I2C_txBit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_txBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txAck
</UL>

<P><STRONG><a name="[60]"></a>I2C_txByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_txByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>

<P><STRONG><a name="[5f]"></a>I2C_txStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, touch_v2m-mps2.o(.text.I2C_txStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_txStart
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>

<P><STRONG><a name="[64]"></a>I2C_txStop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_txStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_txStop
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>

<P><STRONG><a name="[82]"></a>LED_GetCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_v2m-mps2.o(.text.LED_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>LED_Initialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_v2m-mps2.o(.text.LED_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>LED_Off</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, led_v2m-mps2.o(.text.LED_Off))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>LED_On</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, led_v2m-mps2.o(.text.LED_On))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MemManage_Handler &rArr; Mem_Fault_Handler &rArr; stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Mem_Fault_Handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, test.o(.text.Mem_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mem_Fault_Handler &rArr; stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reset
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PendSV_Handler &rArr; Pend_SV_Handler &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pend_SV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Pend_SV_Handler</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, test.o(.text.Pend_SV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Pend_SV_Handler &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SVC_Handler_Main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, test.o(.text.SVC_Handler_Main))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[84]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_cmsdk_cm3.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_cmsdk_cm3.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_Handler</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, blinky.o(.text.TIMER0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Timer0_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blinky.o(.text.Timer0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Touch_GetState</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, touch_v2m-mps2.o(.text.Touch_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Touch_GetState &rArr; Touch_WriteReg &rArr; I2C_MasterTransmit &rArr; I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_WriteReg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>Touch_Initialize</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.Touch_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Touch_Initialize &rArr; Touch_WriteReg &rArr; I2C_MasterTransmit &rArr; I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_WriteReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>UART0RX_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.UART0RX_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0RX_Handler &rArr; USARTRX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTRX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0TX_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.UART0TX_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0TX_Handler &rArr; USARTTX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTTX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UsageFault_Handler &rArr; Usage_Fault_Handler &rArr; stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>Usage_Fault_Handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, test.o(.text.Usage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Usage_Fault_Handler &rArr; stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_recover
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[90]"></a>check_first_non_zero_bit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test.o(.text.check_first_non_zero_bit))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
</UL>

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2a]"></a>main</STRONG> (Thumb, 976 bytes, Stack size 32 bytes, blinky.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; Touch_GetState &rArr; Touch_WriteReg &rArr; I2C_MasterTransmit &rArr; I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cases
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GetCount
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetForegroundColor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetFont
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackgroundColor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Initialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetCount
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[55]"></a>mtb_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, test.o(.text.mtb_disable))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[47]"></a>printBusFaultErrorMsg</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, test.o(.text.printBusFaultErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = printBusFaultErrorMsg &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_first_non_zero_bit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[57]"></a>printMemoryManagementErrorMsg</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, test.o(.text.printMemoryManagementErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = printMemoryManagementErrorMsg &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_first_non_zero_bit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[56]"></a>printUsageErrorMsg</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, test.o(.text.printUsageErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = printUsageErrorMsg &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_first_non_zero_bit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[48]"></a>stackDump</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, test.o(.text.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stackDump &rArr; GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[87]"></a>stdout_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdout_usart.o(.text.stdout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>stdout_putchar</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stdout_usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[69]"></a>sys_recover</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, test.o(.text.sys_recover))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pend_SV_Handler
</UL>

<P><STRONG><a name="[49]"></a>sys_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text.sys_reset))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[88]"></a>test_cases</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test_cases.o(.text.test_cases))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_cases
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>test_svc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_cases.o(.text.test_svc))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cases
</UL>

<P><STRONG><a name="[94]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a2]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[8f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a3]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[45]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pend_SV_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Fault_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler_Main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, blinky.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Config
</UL>

<P><STRONG><a name="[4b]"></a>GLCD_SetWindow</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, glcd_v2m-mps2.o(.text.GLCD_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[52]"></a>delay_ms</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[92]"></a>spi_tran</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.spi_tran))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[4c]"></a>wr_cmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.wr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[93]"></a>wr_dat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.wr_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[4e]"></a>wr_dat_only</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glcd_v2m-mps2.o(.text.wr_dat_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_dat_only
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[4d]"></a>wr_dat_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, glcd_v2m-mps2.o(.text.wr_dat_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_dat_start
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[4f]"></a>wr_dat_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.wr_dat_stop))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[53]"></a>wr_reg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, glcd_v2m-mps2.o(.text.wr_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[58]"></a>I2C_Initialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, touch_v2m-mps2.o(.text.I2C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Initialize &rArr; I2C_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
</UL>

<P><STRONG><a name="[5a]"></a>I2C_MasterReceive</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterReceive &rArr; I2C_rx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
</UL>

<P><STRONG><a name="[5c]"></a>I2C_MasterTransmit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.I2C_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterTransmit &rArr; I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_WriteReg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_ReadReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
</UL>

<P><STRONG><a name="[59]"></a>I2C_clear</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, touch_v2m-mps2.o(.text.I2C_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[5e]"></a>I2C_delay</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, touch_v2m-mps2.o(.text.I2C_delay))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txStop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txStart
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_txBit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rxBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_clear
</UL>

<P><STRONG><a name="[6e]"></a>Touch_ReadReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.Touch_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Touch_ReadReg &rArr; I2C_MasterTransmit &rArr; I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
</UL>

<P><STRONG><a name="[6f]"></a>Touch_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touch_v2m-mps2.o(.text.Touch_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Touch_WriteReg &rArr; I2C_MasterTransmit &rArr; I2C_tx &rArr; I2C_txByte &rArr; I2C_txBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
</UL>

<P><STRONG><a name="[71]"></a>delay_ms</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, touch_v2m-mps2.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
</UL>

<P><STRONG><a name="[39]"></a>USART0_Control</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART0_Control &rArr; USART_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[30]"></a>USART0_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART0_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[3c]"></a>USART0_GetModemStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART0_GetModemStatus))
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[38]"></a>USART0_GetRxCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[3a]"></a>USART0_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[37]"></a>USART0_GetTxCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[31]"></a>USART0_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[33]"></a>USART0_PowerControl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART0_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[35]"></a>USART0_Receive</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART0_Receive &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[34]"></a>USART0_Send</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[3b]"></a>USART0_SetModemControl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART0_SetModemControl))
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[36]"></a>USART0_Transfer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART0_Transfer))
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[32]"></a>USART0_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[72]"></a>USARTRX_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart_v2m-mps2.o(.text.USARTRX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTRX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RX_Handler
</UL>

<P><STRONG><a name="[73]"></a>USARTTX_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USARTTX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USARTTX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0TX_Handler
</UL>

<P><STRONG><a name="[74]"></a>USART_Control</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Control
</UL>

<P><STRONG><a name="[75]"></a>USART_GetRxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetRxCount
</UL>

<P><STRONG><a name="[76]"></a>USART_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetStatus
</UL>

<P><STRONG><a name="[77]"></a>USART_GetTxCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetTxCount
</UL>

<P><STRONG><a name="[78]"></a>USART_Initialize</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Initialize
</UL>

<P><STRONG><a name="[79]"></a>USART_PowerControl</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_PowerControl
</UL>

<P><STRONG><a name="[7a]"></a>USART_Receive</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, usart_v2m-mps2.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
</UL>

<P><STRONG><a name="[7b]"></a>USART_Send</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART_Send))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
</UL>

<P><STRONG><a name="[7c]"></a>USART_Uninitialize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USART_Uninitialize))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Uninitialize
</UL>

<P><STRONG><a name="[2f]"></a>USARTx_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.USARTx_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> usart_v2m-mps2.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[7e]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[7d]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[7f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_v2m-mps2.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[95]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[98]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
